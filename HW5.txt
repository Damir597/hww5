using System;

public class BankAccount
{
    // Свойство для хранения номера счета
    public string AccountNumber { get; private set; }
    
    // Свойство для хранения баланса
    public decimal Balance { get; private set; }
    
    // Свойство для хранения владельца счета
    public string Owner { get; private set; }

    // Конструктор, принимающий номер счета и владельца, устанавливающий баланс по умолчанию в 0
    public BankAccount(string accountNumber, string owner)
    {
        AccountNumber = accountNumber; // Устанавливаем номер счета
        Owner = owner; // Устанавливаем владельца счета
        Balance = 0; // Устанавливаем начальный баланс в 0
    }

    // Метод для пополнения баланса
    public void Deposit(decimal amount)
    {
        if (amount <= 0) // Проверка на неотрицательность суммы
        {
            throw new ArgumentException("Сумма пополнения должна быть положительной.");
        }
        
        Balance += amount; // Увеличиваем баланс на указанную сумму
    }

    // Метод для снятия средств с баланса
    public void Withdraw(decimal amount)
    {
        if (amount <= 0) // Проверка на неотрицательность суммы
        {
            throw new ArgumentException("Сумма снятия должна быть положительной.");
        }

        if (amount > Balance) // Проверка, достаточно ли средств на счету
        {
            throw new InvalidOperationException("Недостаточно средств на счете.");
        }

        Balance -= amount; // Уменьшаем баланс на указанную сумму
    }

    // Метод для получения информации о счете
    public string GetAccountInfo()
    {
        return $"Номер счета: {AccountNumber}, Владелец: {Owner}, Баланс: {Balance:C}"; // Возвращаем строку с информацией о счете
    }

    // Метод для перевода средств с одного счета на другой
    public void Transfer(BankAccount targetAccount, decimal amount)
    {
        Withdraw(amount); // Сначала снимаем средства с текущего счета
        targetAccount.Deposit(amount); // Затем пополняем целевой счет на ту же сумму
    }
}

// Пример использования класса
public class Program
{
    public static void Main(string[] args)
    {
        BankAccount account1 = new BankAccount("123456789", "Иван Иванов");
        BankAccount account2 = new BankAccount("987654321", "Петр Петров");

        account1.Deposit(1000); // Пополняем первый счет на 1000
        Console.WriteLine(account1.GetAccountInfo()); // Выводим информацию о первом счете

        account1.Transfer(account2, 500); // Переводим 500 на второй счет
        Console.WriteLine(account1.GetAccountInfo()); // Выводим информацию о первом счете после перевода
        Console.WriteLine(account2.GetAccountInfo()); // Выводим информацию о втором счете после пополнения
    }
}
